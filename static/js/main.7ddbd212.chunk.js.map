{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","flipCell","every","cell","setState","tblBoard","key","flipCellsAround","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAsCeA,G,wDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GAEVC,KAAKJ,MAAMK,sB,+BAIX,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAf3BS,cCabC,G,wDAML,WAAYX,GAAQ,IAAD,8BAClB,cAAMA,IAEDY,MAAQ,CACZC,QAAS,EACTC,MAAS,EAAKC,eALG,E,0DAclB,IAFA,IAAID,EAAQ,GAEHE,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAE1C,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IACrCD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKJ,MAAMwB,qBAErCV,EAAMO,KAAKH,GAEZ,OAAOJ,I,sCAKQW,GACfC,QAAQC,IAAI,WAAYF,GADF,MAECrB,KAAKJ,MAAtBoB,EAFgB,EAEhBA,MAAOH,EAFS,EAETA,MACTH,EAAQV,KAAKQ,MAAME,MAHD,EAIPW,EAAMG,MAAM,KAAKC,IAAIC,QAJd,mBAIhBd,EAJgB,KAIbG,EAJa,KAMtB,SAASY,EAASf,EAAGG,GAGhBA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACxCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI1BY,EAASf,EAAGG,GACZY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAI,EAAGG,GAChBY,EAASf,EAAI,EAAGG,GAMhB,IAAIN,EAASC,EAAMkB,OAAM,SAACd,GAAD,OAASA,EAAIc,OAAM,SAACC,GAAD,OAAWA,QAEvD7B,KAAK8B,SAAS,CAAEpB,MAAOA,EAAOD,OAAQA,M,+BAK7B,IAAD,OACR,GAAIT,KAAKQ,MAAMC,OACd,OACC,yBAAKL,UAAU,eACd,yBAAKA,UAAU,UACd,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,UAOJ,IADA,IAAI2B,EAAW,GACNnB,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAE1C,IADA,IAAIE,EAAM,GADgC,WAEjCC,GACR,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KACH,kBAAC,EAAD,CACCe,IAAKX,EACLlB,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bd,kBAAmB,kBAAM,EAAKgC,gBAAgBZ,QANxCN,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IAAM,EAAnCA,GAUTgB,EAASd,KAAK,wBAAIe,IAAKpB,GAAIE,IAE5B,OACC,6BACC,yBAAKV,UAAU,eACd,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAGD,2BAAOA,UAAU,SAChB,+BAAQ2B,S,GAlGOzB,cAAdC,EACE2B,aAAe,CACrBrB,MAAsB,EACtBG,MAAsB,EACtBI,oBAAsB,KAqGTb,QCvHA4B,G,6KARX,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.7ddbd212.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css';\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n\tstatic defaultProps = {\r\n\t\tnrows               : 5,\r\n\t\tncols               : 5,\r\n\t\tchanceLightStartsOn : 0.25\r\n\t};\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\thasWon : false,\r\n\t\t\tboard  : this.createBoard()\r\n\t\t};\r\n\t}\r\n\r\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n\tcreateBoard() {\r\n\t\tlet board = [];\r\n\t\t// TODO: create array-of-arrays of true/false values\r\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\r\n\t\t\tlet row = [];\r\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\r\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\r\n\t\t\t}\r\n\t\t\tboard.push(row);\r\n\t\t}\r\n\t\treturn board;\r\n\t}\r\n\r\n\t/** handle changing a cell: update board & determine if winner */\r\n\r\n\tflipCellsAround(coord) {\r\n\t\tconsole.log('FLIPPING', coord);\r\n\t\tlet { ncols, nrows } = this.props;\r\n\t\tlet board = this.state.board;\r\n\t\tlet [ y, x ] = coord.split('-').map(Number);\r\n\r\n\t\tfunction flipCell(y, x) {\r\n\t\t\t// if this coord is actually on board, flip it\r\n\r\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n\t\t\t\tboard[y][x] = !board[y][x];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Flippself\r\n\t\tflipCell(y, x);\r\n\t\tflipCell(y, x - 1);\r\n\t\tflipCell(y, x + 1);\r\n\t\tflipCell(y - 1, x);\r\n\t\tflipCell(y + 1, x);\r\n\t\t// TODO: flip this cell and the cells around it\r\n\r\n\t\t// win when every cell is turned off\r\n\t\t// TODO: determine is the game has been won\r\n\r\n\t\tlet hasWon = board.every((row) => row.every((cell) => !cell));\r\n\r\n\t\tthis.setState({ board: board, hasWon: hasWon });\r\n\t}\r\n\r\n\t/** Render game board or winning message. */\r\n\r\n\trender() {\r\n\t\tif (this.state.hasWon) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"Board-title\">\r\n\t\t\t\t\t<div className=\"winner\">\r\n\t\t\t\t\t\t<span className=\"neon-orange\">YOU</span>\r\n\t\t\t\t\t\t<span className=\"neon-blue\">WIN!</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet tblBoard = [];\r\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\r\n\t\t\tlet row = [];\r\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\r\n\t\t\t\tlet coord = `${y}-${x}`;\r\n\t\t\t\trow.push(\r\n\t\t\t\t\t<Cell\r\n\t\t\t\t\t\tkey={coord}\r\n\t\t\t\t\t\tisLit={this.state.board[y][x]}\r\n\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\ttblBoard.push(<tr key={y}>{row}</tr>);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"Board-title\">\r\n\t\t\t\t\t<div className=\"neon-orange\">Lights</div>\r\n\t\t\t\t\t<div className=\"neon-blue\">Out</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<table className=\"Board\">\r\n\t\t\t\t\t<tbody>{tblBoard}</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}